import asyncio
import json
import re
import traceback
from typing import List

import aiohttp
from sqlalchemy.ext.asyncio import AsyncSession

from database.repository import get_session
from database.services import LotService
from shared.logger import logger
from shared.schemas import LotSchema

log = logger.get_logger()


class VKBot:
    headers = {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Language': 'ru,en;q=0.9',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                      'Chrome/130.0.0.0 YaBrowser/24.12.0.0 Safari/537.36',
    }

    def __init__(self, session: AsyncSession):
        self.lot_service = LotService(session)

    async def buy_lot(self, lot_id: int, user_id: int, auth_key: str):
        url = "https://vip3.activeusers.ru/app.php"
        params = {
            'act': 'a_program_say',
            'viewer_id': str(user_id),
            'auth_key': auth_key
        }
        data = {
            'ch': f'u{user_id}',
            'text': f'–ö—É–ø–∏—Ç—å –ª–æ—Ç {lot_id}',
            'context': '1',
            'messages[0][message]': f'–ö—É–ø–∏—Ç—å –ª–æ—Ç {lot_id}',
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, params=params, data=data, headers=self.headers) as resp:
                    resp.raise_for_status()
                    log.info(f"‚úÖ –õ–æ—Ç {lot_id} –∫—É–ø–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except aiohttp.ClientError as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª–æ—Ç–∞ {lot_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            log.debug(traceback.format_exc())

    async def get_cheapest_lots(self, item_id: int, auth_key: str, max_price: int, user_id: int) -> int | list[
        LotSchema] | None:
        url = "https://vip3.activeusers.ru/app.php"
        params = {
            'act': 'a_program_run',
            'viewer_id': str(user_id),
            'auth_key': auth_key
        }
        data = f"code=51132l145l691d2fbd8b124d57&context=1&vars[item][id]={item_id}"

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, params=params, data=data, headers=self.headers) as resp:
                    resp.raise_for_status()

                    response_text = await resp.text()
                    log.debug(f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞—É–∫—Ü–∏–æ–Ω–∞:\n{response_text}")
                    response_json = json.loads(response_text)

                    lots_text = response_json['message'][0]['message']
                    list_lots = lots_text.split('\n')

                    if list_lots[0].startswith("üö´–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∞—É–∫—Ü–∏–æ–Ω —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ"):
                        return 1

                    cheapest_lots = []
                    for lot in list_lots:
                        try:
                            if not lot.strip() or lot.startswith('\r'):
                                break
                            match = re.search(r'\((\d+)\)', lot)
                            if match:
                                lot_id = int(match.group(1))
                                lot = re.sub(r'\(\d+\)', '', lot).strip()
                            else:
                                log.info("–õ–æ—Ç ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                continue
                            parts = lot.split(" ")
                            count = int(parts[0].split('*')[0])
                            price = int(parts[2])
                            name_array = parts[3:-1]
                            name = " ".join(name_array)
                            if (price / count) <= max_price:
                                cheapest_lots.append(LotSchema(id=lot_id, name=name, price=price))
                        except Exception as ex:
                            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ—Ç–∞: '{lot}': {ex}")
                            continue
                    return cheapest_lots
        except aiohttp.ClientError as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ—Ç–æ–≤: {e}")
            log.debug(traceback.format_exc())
            return

    async def monitoring(self, item_id: int, max_price: int, user_id: int, auth_key: str, delay: int, name: str):
        log.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è item_id={item_id}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {delay} –º–∏–Ω., –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_price}")

        while True:
            try:
                cheapest_lots = await self.get_cheapest_lots(item_id, auth_key, max_price, user_id)
                if cheapest_lots is None:
                    continue
                if isinstance(cheapest_lots, int):
                    log.info(f"‚è≥ {item_id} —Å—Ç–æ–∏—Ç –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–∏ (—á–∞—Å—Ç—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä). –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å.")
                    await asyncio.sleep(3600)
                    continue
                if isinstance(cheapest_lots, list) and len(cheapest_lots) == 0:
                    log.info(f"‚è≥ {item_id}: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ—Ç–æ–≤ —Å—Ç–æ–∏—Ç –Ω–∞ –ø–∞—É–∑—É –Ω–∞ {delay} –º–∏–Ω—É—Ç")
                    await asyncio.sleep(delay * 60)
                    continue
                for lot in cheapest_lots:
                    await self.buy_lot(lot.id, user_id, auth_key)
                    await self.lot_service.add_lot(LotSchema(id=lot.id, name=lot.name, price=lot.price))
                    log.info(f"‚úÖ –ö—É–ø–ª–µ–Ω –ª–æ—Ç {lot.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –¢–æ–≤–∞—Ä: {lot.name}, —Ü–µ–Ω–∞: {lot.price}.")
                    await asyncio.sleep(10)

                await asyncio.sleep(delay * 60)
            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ item_id={item_id}: {e}")
                log.debug(traceback.format_exc())
                await asyncio.sleep(60)

    async def view_lots(self) -> List[LotSchema] | None:
        try:
            lots = await self.lot_service.get_lots()
            return lots
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ—Ç–æ–≤: {e}")
            log.debug(traceback.format_exc())


def start_monitoring(item_id: int, max_price: int, user_id: int, auth_key: str, delay: int, name: str):
    async def async_impl():
        async with get_session() as session:
            vk_bot = VKBot(session)
            log.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ—Ç–∞ {item_id} —Å—Ç–∞—Ç—É—Å: –ó–∞–ø—É—Å–∫")
            await vk_bot.monitoring(item_id, max_price, user_id, auth_key, delay, name)

    asyncio.run(async_impl())
